package net.cf.form.engine.repository.mysql.data;

import net.cf.form.engine.repository.data.DataField;
import net.cf.form.engine.repository.data.DataObject;
import net.cf.form.engine.repository.data.DataObjectResolver;
import net.cf.form.engine.repository.mysql.statement.insert.InsertSqlBuilder;
import net.cf.form.engine.repository.oql.ast.statement.OqlInsertStatement;
import net.cf.form.engine.repository.oql.ast.statement.OqlInsertValues;
import net.cf.form.engine.repository.sql_bak.InsertSqlInfo;
import net.cf.form.engine.repository.oql.ast.expr.QqlExpr;
import net.cf.form.engine.repository.oql.ast.expr.QqlValuableExpr;
import net.cf.form.engine.repository.oql.ast.expr.literal.OqlNullExpr;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * 插入语句的实现
 *
 * @author clouds
 */
public class MysqlInsertImpl extends AbstractMysqlCurd {

    public MysqlInsertImpl(NamedParameterJdbcTemplate jdbcTemplate, DataObjectResolver resolver) {
        super(jdbcTemplate, resolver);
    }

    /**
     * 执行插入操作（不考虑子表的插入）
     */
    public Object[] insertSelf(InsertSqlInfo sqlInfo, Map<String, Object> values) {
        DataObject object = sqlInfo.getObject();
        OqlInsertStatement statement = sqlInfo.getStatement();
        String sql = new InsertSqlBuilder(sqlInfo).getSql();

        int valuesSize = statement.getInsertInto().getValuesList().size();
        Object[] recordIds = new Object[valuesSize];

        DataField primaryField = object.getPrimaryField();
        if (!primaryField.isAutoGenerated()) {
            jdbcTemplate.update(sql, values);
            // 没有自增主键时，获取数据中的主键的值
            if (values == null) {
                getCustomizedRecordIds(sqlInfo, recordIds);
            } else {
                getCustomizedRecordIds(sqlInfo, Arrays.asList(values), recordIds);
            }
        } else {
            // 有自增主键时，通过KeyHolder获取自增主键的值
            KeyHolder keyHolder = new GeneratedKeyHolder();
            SqlParameterSource parameterSource = new MapSqlParameterSource(values);
            jdbcTemplate.update(sql, parameterSource, keyHolder);
            String primaryColumnName = primaryField.getColumnName();
            getAutoGeneratedRecordIds(keyHolder, primaryColumnName, valuesSize, recordIds, 0);
        }

        return recordIds;
    }

    public Object[] insertSelf(InsertSqlInfo sqlInfo, List<Map<String, Object>> paramMapList) {
        DataObject object = sqlInfo.getObject();
        String sql = new InsertSqlBuilder(sqlInfo).getSql();

        int valuesSize = sqlInfo.getStatement().getInsertInto().getValuesList().size();
        int paramMapSize = paramMapList.size();
        SqlParameterSource[] parameterSources = new MapSqlParameterSource[paramMapSize];
        for (int i = 0, l = paramMapList.size(); i < l; i++) {
            parameterSources[i] = new MapSqlParameterSource(paramMapList.get(i));
        }

        DataField primaryField = object.getPrimaryField();
        Object[] recordIds = new Object[valuesSize * paramMapSize];
        if (!primaryField.isAutoGenerated()) {
            jdbcTemplate.batchUpdate(sql, parameterSources);
            // 没有自增主键时，获取数据中的主键的值
            getCustomizedRecordIds(sqlInfo, paramMapList, recordIds);
        } else {
            // 有自增主键时，通过KeyHolder获取自增主键的值
            String primaryFieldName = object.getPrimaryField().getName();
            KeyHolder keyHolder = new GeneratedKeyHolder();
            // jdbcTemplate.batchUpdate(sql, parameterSources); 如何带KeyHolder参数？
            for (int i = 0; i < paramMapSize; i++) {
                jdbcTemplate.update(sql, parameterSources[i], keyHolder);
                getAutoGeneratedRecordIds(keyHolder, primaryFieldName, valuesSize, recordIds, i * valuesSize);
            }
        }

        return recordIds;
    }

    /**
     * 从SQL信息中获取自定义的记录ID的值
     *
     * @return
     */
    private Object[] getCustomizedRecordIds(InsertSqlInfo sqlInfo, Object[] recordIds) {
        List<OqlInsertValues> insertValuesList = sqlInfo.getStatement().getInsertInto().getValuesList();
        int primaryIndex = sqlInfo.getPrimaryFieldIndex();
        if (primaryIndex > 0) {
            for (int i = 0; i < insertValuesList.size(); i++) {
                OqlInsertValues insertValues = insertValuesList.get(i);
                QqlExpr value = insertValues.getValues().get(primaryIndex);
                if (value instanceof OqlNullExpr) {
                    recordIds[i] = null;
                } else if (value instanceof QqlValuableExpr) {
                    recordIds[i] = ((QqlValuableExpr) value).getValue();
                }
            }
        }

        return recordIds;
    }

    /**
     * 从数据中获取自定义的记录ID的值
     *
     * @param sqlInfo
     * @param valuesList
     * @param recordIds
     * @return
     */
    private Object[] getCustomizedRecordIds(InsertSqlInfo sqlInfo, List<Map<String, Object>> valuesList, Object[] recordIds) {
        String primaryFieldName = sqlInfo.getObject().getPrimaryField().getName();
        for (int i = 0; i < valuesList.size(); i++) {
            recordIds[i] = valuesList.get(i).get(primaryFieldName);
        }

        return recordIds;
    }

    /**
     *
     * 获取自动生成的主键
     *
     * @param keyHolder
     * @param primaryColumnName
     * @param valuesSize
     * @param recordIds
     * @param startIndex
     */
    private void getAutoGeneratedRecordIds(KeyHolder keyHolder, String primaryColumnName, int valuesSize, Object[] recordIds, int startIndex) {
        if (valuesSize == 1) {
            recordIds[startIndex] = keyHolder.getKey().longValue();
        } else {
            List<Map<String, Object>> keyList = keyHolder.getKeyList();
            for (int i = 0; i < valuesSize; i++) {
                recordIds[startIndex + i] = keyList.get(i).get(primaryColumnName);
            }
        }
    }
}