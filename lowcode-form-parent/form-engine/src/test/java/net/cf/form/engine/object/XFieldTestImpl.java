package net.cf.form.engine.object;

import net.cf.form.engine.def.DefaultValue;
import net.cf.form.engine.def.DefaultValueType;
import net.cf.form.engine.def.FieldDefinition;

import java.util.List;

public class XFieldTestImpl implements XField {

    private FieldDefinition fieldDef;

    public XFieldTestImpl(FieldDefinition fieldDef) {
        this.fieldDef = fieldDef;
    }

    @Override
    public String getCode() {
        return fieldDef.getName();
    }

    @Override
    public String getName() {
        return fieldDef.getTitle();
    }

    @Override
    public String getColumnName() {
        return fieldDef.getName();
    }

    @Override
    public boolean isPrimary() {
        return XField.super.isPrimary();
    }

    @Override
    public boolean isAutoGeneratedPrimary() {
        return false;
    }

    @Override
    public boolean isCollection() {
        return fieldDef.isCollection();
    }

    @Override
    public DataType getDataType() {
        return null;
    }

    @Override
    public Integer getDataLength() {
        return 0;
    }

    @Override
    public Integer getDataPrecision() {
        return 0;
    }

    @Override
    public Number getMinValue() {
        return null;
    }

    @Override
    public Number getMaxValue() {
        return null;
    }

    @Override
    public Object getDefaultValue() {
        DefaultValue defaultValue = this.fieldDef.getDefaultValue();
        if (defaultValue == null) {
            return null;
        }

        DefaultValueType defaultValueType = defaultValue.getType();
        if (DefaultValueType.LITERAL == defaultValueType) {
            return defaultValue.getValue();
        } else if (DefaultValueType.FORMULA == defaultValueType) {
            //return JsScriptUtils.eval(defaultValue.getValue());
            return null;
        }

        return null;
    }

    @Override
    public List<XFieldProperty> getProperties() {
        return null;
    }
}
