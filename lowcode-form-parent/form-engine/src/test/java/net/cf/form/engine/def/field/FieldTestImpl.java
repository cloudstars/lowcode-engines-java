package net.cf.form.engine.def.field;

import net.cf.form.engine.object.DataType;
import net.cf.form.engine.object.XField;

import java.util.List;
import java.util.Map;

public class FieldTestImpl implements XField {

    private FieldDef fieldDef;

    public FieldTestImpl(FieldDef fieldDef) {
        this.fieldDef = fieldDef;
    }

    @Override
    public String getCode() {
        return fieldDef.getName();
    }

    @Override
    public String getName() {
        return fieldDef.getCode();
    }

    @Override
    public String getColumnName() {
        return fieldDef.getName();
    }

    @Override
    public boolean isPrimary() {
        return XField.super.isPrimary();
    }

    @Override
    public boolean isAutoGenerated() {
        return false;
    }

    @Override
    public boolean isCollection() {
        return fieldDef.isCollection();
    }

    @Override
    public DataType getDataType() {
        return fieldDef.getDataType();
    }

    @Override
    public Object getDefaultValue(Map<String, Object> dataMap) {
        DefaultValue defaultValue = this.fieldDef.getDefaultValue();
        if (defaultValue == null) {
            // 没有配置设置值，返回null
            return null;
        }

        // 根据默认值的类型时是常量和表达式来执行不同的逻辑
        DefaultValueType defaultValueType = defaultValue.getType();
        if (DefaultValueType.LITERAL == defaultValueType) {
            return defaultValue.getValue();
        } else if (DefaultValueType.FORMULA == defaultValueType) {
            return FormulaTestUtils.eval(defaultValue.getValue(), dataMap);
        } else {
            return null;
        }
    }

    @Override
    public List<FieldPropertyTestImpl> getProperties() {
        return this.fieldDef.getProperties();
    }

    @Override
    public Map<String, Object> getAttributeValues() {
        return this.fieldDef.getAttributeValueMap();
    }
}
